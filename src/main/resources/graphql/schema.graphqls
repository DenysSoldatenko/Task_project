type Query {
    getProjectByName(projectName: String!): ProjectDto!
    getTeamsForProject(projectName: String!): [ProjectTeamDto!]!

    getAllRoles: [RoleDto!]!
    getRoleByName(roleName: String!): RoleDto!
    getRoleHierarchy(roleName: String!): RoleHierarchyListDto!

    getTaskCommentsBySlug(slug: String!, page: Int = 0, size: Int = 10, sort: String = "id,asc"): TaskCommentPageDto!

    getTaskById(id: ID!): TaskDto!
    getSoonExpiringTasks(username: String!, duration: String!, projectName: String!, teamName: String!): [TaskDto!]!

    getTeamByName(teamName: String!): TeamDto!
    getUsersWithRolesForTeam(teamName: String!): [TeamUserDto!]!
    getProjectsForTeam(teamName: String!): [ProjectTeamDto!]!
}

type Mutation {
    createProject(projectDto: ProjectInput!): ProjectDto!
    updateProject(projectName: String!, projectDto: ProjectInput!): ProjectDto!
    deleteProject(projectName: String!): Boolean
    addTeamToProject(projectName: String!, projectTeamDtoList: [ProjectTeamInput!]!): ProjectDto!

    createRole(roleDto: RoleInput!): RoleDto!
    updateRole(roleName: String!, roleDto: RoleInput!): RoleDto!
    deleteRole(roleName: String!): Boolean
    createRoleHierarchies(roleHierarchyDtoList: [RoleHierarchyInput!]!): [RoleHierarchyDto!]!
    deleteRoleHierarchies(roleHierarchyDtoList: [RoleHierarchyInput!]!): Boolean

    createTaskComment(taskCommentDto: TaskCommentInput!): TaskCommentDto!
    updateTaskComment(id: ID!, taskCommentDto: TaskCommentInput!): TaskCommentDto!
    deleteTaskComment(id: ID!): Boolean

    createTask(taskDto: TaskInput!): TaskDto!
    updateTask(id: ID!, taskDto: TaskInput!): TaskDto!
    deleteTask(id: ID!): Boolean

    createTeam(teamDto: TeamInput!): TeamDto!
    updateTeam(teamName: String!, teamDto: TeamInput!): TeamDto!
    deleteTeam(teamName: String!): Boolean
    addUsersToTeam(teamName: String!, teamUserDtoList: [TeamUserInput!]!): [TeamUserDto!]!
}